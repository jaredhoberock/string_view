#pragma once

#include <string>
#include <iterator>
#include <cstring>
#include <limits>
#include <utility>
#include <algorithm>

namespace std
{
namespace experimental
{
namespace fundamentals_v1
{


template<class charT, class traits = std::char_traits<charT>>
class basic_string_view
{
  public:
    typedef traits                                traits_type;
    typedef charT                                 value_type;
    typedef charT*                                pointer;
    typedef const charT*                          const_pointer;
    typedef charT&                                reference;
    typedef const charT&                          const_reference;
    typedef const_pointer                         const_iterator;
    typedef const_iterator                        iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef const_reverse_iterator                reverse_iterator;
    typedef size_t                                size_type;
    typedef ptrdiff_t                             difference_type;

    static const size_type npos = size_type(-1);

    basic_string_view()
      : data_(), size_()
    {}

    basic_string_view(const basic_string_view& other)
      : data_(other.data()), size_(other.size())
    {}

    basic_string_view& operator=(const basic_string_view& other)
    {
      data_ = other.data();
      size_ = other.size();
      return *this;
    }

    template<class Allocator>
    basic_string_view(const basic_string<charT, traits, Allocator>& str)
      : data_(str.data()), size_(str.size())
    {}

    basic_string_view(const charT* str)
      : data_(str), size_(std::strlen(str))
    {}

    basic_string_view(const charT *str, size_type len)
      : data_(str), size_(len)
    {}

    const_iterator begin() const
    {
      return data_;
    }

    const_iterator end() const
    {
      return begin() + size();
    }

    const_iterator cbegin() const
    {
      return begin();
    }

    const_iterator cend() const
    {
      return end();
    }

    const_reverse_iterator rbegin() const
    {
      return const_reverse_iterator(end());
    }

    const_reverse_iterator rend() const
    {
      return const_reverse_iterator(begin());
    }

    const_reverse_iterator crbegin() const
    {
      return rbegin();
    }

    const_reverse_iterator crend() const
    {
      return rend();
    }

    size_type size() const
    {
      return size_;
    }

    size_type length() const
    {
      return size();
    }

    size_type max_size() const
    {
      return std::numeric_limits<size_type>::max();
    }

    bool empty() const
    {
      return size() == 0;
    }

    const_reference operator[](size_type pos) const
    {
      return data_[pos];
    }

    const_reference at(size_type pos) const
    {
      if(pos >= size()) throw std::out_of_range();
      return operator[](pos);
    }

    const_reference front() const
    {
      return data_[0];
    }

    const_reference back() const
    {
      return data_[size() - 1];
    }

    const_pointer data() const
    {
      return data_;
    }

    void clear()
    {
      *this = basic_string_view();
    }

    void remove_prefix(size_type n)
    {
      data_ += n;
      size_ -= n;
    }

    void remove_suffix(size_type n)
    {
      size_ -= n;
    }

    void swap(basic_string_view &s)
    {
      std::swap(data_, s.data_);
      std::swap(size_, s.size_);
    }

    template<class Allocator>
    explicit operator basic_string<charT, traits, Allocator>() const
    {
      return basic_string<charT, traits, Allocator>(begin(), end());
    }

    template<class Allocator = allocator<charT>>
    basic_string<charT, traits, Allocator> to_string(const Allocator& a = Allocator()) const
    {
      return basic_string<charT, traits, Allocator>(begin(), end(), a);
    }

    size_type copy(charT* s, size_type n, size_type pos = 0) const
    {
      if(pos > size()) throw out_of_range();
      
      size_type rlen = std::min(n, size() - pos);

      std::copy_n(begin() + pos, rlen, s);

      return rlen;
    }

    basic_string_view substr(size_type pos = 0, size_type n = npos) const
    {
      if(pos > size()) throw out_of_range();

      size_type rlen = std::min(n, size() - pos);

      return basic_string_view(data() + pos, rlen);
    }

    int compare(basic_string_view str) const
    {
      size_type rlen = std::min(size(), str.size());
      return traits::compare(data(), str.data(), rlen);
    }

    int compare(size_type pos1, size_type n1, basic_string_view str) const
    {
      return substr(pos1, n1).compare(str);
    }

    int compare(size_type pos1, size_type n1, basic_string_view str, size_type pos2, size_type n2) const
    {
      return substr(pos1, n1).compare(str.substr(pos2, n2));
    }

    int compare(const charT *s) const
    {
      return compare(basic_string_view(s));
    }

    int compare(size_type pos1, size_type n1, const charT* s) const
    {
      return substr(pos1, n1).compare(s);
    }

    int compare(size_type pos1, size_type n1, const charT* s, size_type n2) const
    {
      return substr(pos1, n1).compare(basic_string_view(s, n2));
    }

  private:
    const_pointer data_;
    size_type     size_;
};


template<class T, class traits>
bool operator==(basic_string_view<T,traits> lhs, basic_string_view<T,traits> rhs)
{
  return lhs.compare(rhs) == 0;
}

template<class T, class traits>
bool operator!=(basic_string_view<T,traits> lhs, basic_string_view<T,traits> rhs)
{
  return lhs.compare(rhs) != 0;
}

template<class T, class traits>
bool operator<(basic_string_view<T,traits> lhs, basic_string_view<T,traits> rhs)
{
  return lhs.compare(rhs) < 0;
}

template<class T, class traits>
bool operator>(basic_string_view<T,traits> lhs, basic_string_view<T,traits> rhs)
{
  return lhs.compare(rhs) > 0;
}

template<class T, class traits>
bool operator<=(basic_string_view<T,traits> lhs, basic_string_view<T,traits> rhs)
{
  return lhs.compare(rhs) <= 0;
}

template<class T, class traits>
bool operator>=(basic_string_view<T,traits> lhs, basic_string_view<T,traits> rhs)
{
  return lhs.compare(rhs) >= 0;
}

template<class charT, class traits>
basic_ostream<charT,traits>& operator<<(basic_ostream<charT,traits> &os, basic_string_view<charT,traits> &str)
{
  return os << str.to_string();
}

typedef basic_string_view<char> string_view;


} // end fundamentals_v1
} // end experimental


template<typename T> struct hash;

template<> struct hash<experimental::fundamentals_v1::string_view>
{
  size_t operator()(experimental::fundamentals_v1::string_view str)
  {
    hash<string> h;
    return h(str.to_string());
  }
};


} // end std

